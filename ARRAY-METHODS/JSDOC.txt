1. `map()`: Este método recorre cada elemento del array y devuelve un nuevo array con los valores resultantes. Se utiliza principalmente para modificar o transformar los valores de un array.

2. `filter()`: Este método filtra los elementos del array y devuelve un nuevo array con los elementos que cumplen la condición especificada. 

3. `reduce()`: Este método reduce los elementos de un array a un solo valor, aplicando una función acumuladora a cada elemento.

4. `forEach()`: Este método ejecuta una función por cada elemento del array.

5. `sort()`: Este método ordena los elementos de un array. 

6. `indexOf()`: Este método devuelve la posición del primer elemento que coincida con el valor especificado.

7. `lastIndexOf()`: Este método devuelve la posición del último elemento que coincida con el valor especificado.

8. `includes()`: Este método devuelve `true` si el array contiene un elemento con el valor especificado.

9. `splice()`: Este método cambia el contenido de un array eliminando elementos existentes y/o agregando nuevos elementos.

10. `slice()`: Este método devuelve una copia de una parte del array, sin modificar el array original.

#### 1. `Array.prototype.map()`
Este método crea un nuevo array con los resultados de la llamada a la función indicada aplicados a cada uno de sus elementos.

const numbers = [1, 2, 3, 4, 5];

const doubledNumbers = numbers.map(function(num) {
  return num * 2;
});

console.log(doubledNumbers); // [2, 4, 6, 8, 10]

#### 2. `Array.prototype.filter()`
Este método crea un nuevo array con todos los elementos que cumplan la condición indicada por la función dada.

const numbers = [1, 2, 3, 4, 5];

const oddNumbers = numbers.filter(function(num) {
  return num % 2 !== 0;
});

console.log(oddNumbers); // [1, 3, 5]

#### 3. `Array.prototype.reduce()`
Este método aplica una función acumuladora sobre cada elemento de un array, devolviendo como resultado un único valor.

javascript
const numbers = [1, 2, 3, 4, 5];

const sum = numbers.reduce(function(acc, curr) {
  return acc + curr;
});

console.log(sum); // 15

#### 4. `Array.prototype.forEach()`
Este método ejecuta una función por cada elemento del array.

const fruits = ['apple', 'banana', 'orange'];

fruits.forEach(function(fruit) {
  console.log(fruit);
});

// output:
// "apple"
// "banana"
// "orange"

#### 5. `Array.prototype.find()`
Este método devuelve el valor del primer elemento del array que cumple con la función de prueba proporcionada.

const numbers = [1, 2, 3, 4, 5];

const firstOddNumber = numbers.find(function(num) {
  return num % 2 !== 0;
});

console.log(firstOddNumber); // 1

### Método push()
Añade uno o más elementos al final de un array y devuelve la nueva longitud del array.

const arr = ['manzana', 'pera', 'naranja'];
arr.push('banana');
console.log(arr); // ['manzana', 'pera', 'naranja', 'banana']

### Método pop()
Elimina el último elemento de un array y devuelve ese elemento.

const arr = ['manzana', 'pera', 'naranja'];
const lastElement = arr.pop();
console.log(arr); // ['manzana', 'pera']
console.log(lastElement); // 'naranja'

### Método shift()
Elimina el primer elemento de un array y devuelve ese elemento. Los índices de los demás elementos del array se actualizan para reflejar este cambio.

const arr = ['manzana', 'pera', 'naranja'];
const firstElement = arr.shift();
console.log(arr); // ['pera', 'naranja']
console.log(firstElement); // 'manzana'

### Método unshift()
Añade uno o más elementos al principio de un array y devuelve la nueva longitud del array. Los índices de los demás elementos del array se actualizan para reflejar este cambio.

const arr = ['manzana', 'pera', 'naranja'];
arr.unshift('banana', 'cereza');
console.log(arr); // ['banana', 'cereza', 'manzana', 'pera', 'naranja']

### Método slice()
Devuelve una copia de una porción del array, especificada por un índice inicial y uno final (excluyendo el elemento final).

const arr = ['manzana', 'pera', 'naranja', 'banana', 'cereza'];
const slicedArr = arr.slice(1, 4);
console.log(slicedArr); // ['pera', 'naranja', 'banana']

### Método splice()
Cambia el contenido de un array eliminando elementos existentes y/o añadiendo nuevos elementos. Los índices de los demás elementos del array se actualizan para reflejar este cambio.

const arr = ['manzana', 'pera', 'naranja', 'banana', 'cereza'];
arr.splice(2, 2, 'limón', 'kiwi');
console.log(arr); // ['manzana', 'pera', 'limón', 'kiwi', 'cereza']

### Método filter()
Crea un nuevo array con todos los elementos que pasan la prueba de la función proporcionada.

const arr = [1, 2, 3, 4, 5, 6];
const filteredArr = arr.filter(num => num % 2 === 0);
console.log(filteredArr); // [2, 4, 6]